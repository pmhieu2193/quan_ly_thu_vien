<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <title>Trả Sách & Phạt</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #2196F3;
            --secondary-color: #FFC107;
            --danger-color: #dc3545;
            --success-color: #28a745;
            --background-color: #f8f9fa;
            --border-color: #dee2e6;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Roboto', sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: var(--background-color);
            padding: 2rem;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        h1 {
            color: var(--primary-color);
            margin-bottom: 2rem;
            font-weight: 500;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 2rem;
            background: white;
        }

        th,
        td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
        }

        th {
            background-color: var(--primary-color);
            color: white;
            font-weight: 500;
        }

        tr:hover {
            background-color: rgba(33, 150, 243, 0.05);
        }

        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            min-width: 100px;
        }

        .btn-return {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-return:hover {
            background-color: #1976D2;
        }

        .btn-return.selected {
            background-color: #1565C0;
        }

        .btn-fine {
            background-color: var(--danger-color);
            color: white;
            margin-left: 8px;
        }

        .btn-fine:hover {
            background-color: #c82333;
        }

        .btn-fine.selected {
            background-color: #921925;
        }

        .action-buttons {
            margin-top: 2rem;
            display: flex;
            gap: 1rem;
            justify-content: flex-start;
        }

        #confirmBtn {
            background-color: var(--success-color);
            color: white;
            padding: 0.75rem 1.5rem;
            font-size: 1.1rem;
        }

        #confirmBtn:hover {
            background-color: #218838;
        }

        #fineBtn {
            background-color: var(--danger-color);
            color: white;
            padding: 0.75rem 1.5rem;
            font-size: 1.1rem;
        }

        #fineBtn:hover {
            background-color: #c82333;
        }

        .overdue {
            color: #dc3545;
            font-weight: bold;
            font-size: 0.9em;
            margin-top: 4px;
        }

        .status-returned {
            color: var(--success-color);
            font-weight: 500;
        }

        .status-lost {
            color: var(--danger-color);
            font-weight: 500;
        }

        button:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }

        .fade-in {
            animation: fadeIn 0.3s ease;
        }
    </style>
</head>

<body>
    <div class="container">
        <h2>Trả Sách</h2>
        <div id="bookList">
            <table class="book-table">
                <thead>
                    <tr>
                        <th>Chọn</th>
                        <th>Mã sách</th>
                        <th>Tên sách</th>
                        <th>Tác giả</th>
                        <th>Thể loại</th>
                        <th>Ngày mượn</th>
                        <th>Ngày phải trả</th>
                    </tr>
                </thead>
                <tbody id="bookTableBody"></tbody>
            </table>
        </div>
        <button id="returnButton" class="return-btn" onclick="xacNhanTra()" disabled>
            Xác nhận trả sách
        </button>
    </div>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

    <script>
        const urlParams = new URLSearchParams(window.location.search);
        const maDG = urlParams.get('madg');

        const selectedBooksToReturn = new Set();
        const selectedBooksToFine = new Set();

        window.onload = fetchSachDangMuon;

        function isOverdue(ngayPhaiTra) {
            const today = new Date();
            const dueDate = new Date(ngayPhaiTra);
            return today > dueDate;
        }

        function renderBooks(data) {
            const tbody = document.getElementById('bookTableBody');
            tbody.innerHTML = '';

            if (!data.ChiTietMuon || data.ChiTietMuon.length === 0) {
                tbody.innerHTML = '<tr><td colspan="7">Độc giả không có sách đang mượn</td></tr>';
                return;
            }

            data.ChiTietMuon.forEach(chitiet => {
                if (chitiet.TrangThaiTra === 0) {
                    const isBookOverdue = isOverdue(data.NgayPhaiTra);
                    const row = `
                    <tr>
                        <td>
                            <input type="checkbox" value="${chitiet.Sach.MaSach}" onchange="toggleBookSelection(this)">
                        </td>
                        <td>${chitiet.Sach.MaSach}</td>
                        <td>${chitiet.Sach.TenSach}</td>
                        <td>${chitiet.Sach.TacGia}</td>
                        <td>${chitiet.Sach.TheLoai ? chitiet.Sach.TheLoai.TenTL : ''}</td>
                        <td>${new Date(data.NgayMuon).toLocaleDateString('vi-VN')}</td>
                        <td>
                            ${new Date(data.NgayPhaiTra).toLocaleDateString('vi-VN')}
                            ${isBookOverdue ? '<div class="overdue">Đã quá hạn</div>' : ''}
                        </td>
                    </tr>
                `;
                    tbody.innerHTML += row;
                }
            });
        }

        function toggleBookSelection(checkbox) {
            if (checkbox.checked) {
                selectedBooksToReturn.add(checkbox.value);
            } else {
                selectedBooksToReturn.delete(checkbox.value);
            }
            document.getElementById('returnButton').disabled = selectedBooksToReturn.size === 0;
        }

        async function fetchSachDangMuon() {
            try {
                const maDG = window.location.pathname.split('/').pop();
                const response = await fetch(`/librarian/return/books/${maDG}`);
                if (!response.ok) throw new Error('Network response was not ok');

                const data = await response.json();
                renderBooks(data);
            } catch (error) {
                console.error('Error:', error);
                alert("Lỗi khi tải dữ liệu sách đang mượn");
            }
        }

        // Thêm hàm format date
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('vi-VN', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit'
            });
        }

        function toggleTraSach(maSach, btn) {
            if (selectedBooksToReturn.has(maSach)) {
                selectedBooksToReturn.delete(maSach);
                btn.classList.remove("selected");
                btn.textContent = "Trả sách";
            } else {
                selectedBooksToReturn.add(maSach);
                btn.classList.add("selected");
                btn.textContent = "Đã chọn";
            }
            updateButtonsVisibility();
        }

        function togglePhatSach(maSach, btn) {
            if (selectedBooksToFine.has(maSach)) {
                selectedBooksToFine.delete(maSach);
                btn.classList.remove("selected");
                btn.textContent = "Mất sách";
            } else {
                selectedBooksToFine.add(maSach);
                btn.classList.add("selected");
                btn.textContent = "Đã chọn";
            }
            updateButtonsVisibility();
        }

        function updateButtonsVisibility() {
            document.getElementById("confirmBtn").style.display = selectedBooksToReturn.size > 0 ? "inline-block" : "none";
            document.getElementById("fineBtn").style.display = selectedBooksToFine.size > 0 ? "inline-block" : "none";
        }

        function xacNhanTra() {
            const maDG = window.location.pathname.split('/').pop();
            const danhSachSach = Array.from(selectedBooksToReturn);

            fetch('/librarian/return/process', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    maDG: parseInt(maDG),
                    danhSachSach: danhSachSach
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(data.message);
                        window.location.href = '/librarian/manage_book';
                    } else {
                        throw new Error(data.error);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert(error.message);
                });
        }

        function xacNhanMatSach() {
            alert("Tạo phiếu phạt với mã sách: " + Array.from(selectedBooksToFine).join(", "));
            // TODO: Gửi yêu cầu tạo phiếu phạt
            if (selectedBooksToFine.size === 0) {
                alert("Vui lòng chọn ít nhất một sách để trả!");
                return;
            }

            const dsMaSach = Array.from(selectedBooksToFine);
            const madg = urlParams.get('madg');

            if (!madg) {
                alert("Không tìm thấy mã độc giả!");
                return;
            }

            const fineBtn = document.getElementById('fineBtn');
            fineBtn.disabled = true;
            fineBtn.textContent = 'Đang xử lý...';

            fetch('/tao-phieu-phat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    madg: madg,
                    danhSach: dsMaSach
                })
            })
                .then(async response => {
                    const text = await response.text();
                    if (!response.ok) {
                        throw new Error(text || `HTTP error! status: ${response.status}`);
                    }
                    return text;
                })
                .then(result => {
                    alert(result);
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                })
                .catch(error => {
                    console.error('Lỗi:', error);
                    alert(`Lỗi: ${error.message}`);
                })
                .finally(() => {
                    fineBtn.disabled = false;
                    fineBtn.textContent = 'Xác nhận phiếu phạt';
                });
        }
    </script>
</body>

</html>